train=U[folds[[j]],],
test=U[-folds[[j]],]%>%
select(-Species),
cl=irisfold$Species,
k=neigh
)
rm(list=ls())
library(tidyverse)
library(boot)
library(caret)
X<-as.matrix(iris[,-5])
for (j in 1:4){
X[,j]<-X[,j]-mean(X[,j])
}
svdX<-svd(X)
#(explained_variance<-svdX$d/sum(svdX$d))
#%cumsum(explained_variance)
#ggplot()+
#  geom_col(aes(x=1:(ncol(iris)-1),y=explained_variance),fill="purple",color="red")
p=2
U<-svdX$u[,1:p]
iris<-iris
numneigh<-50
kcosts<-data.frame(k=seq(1,numneigh),
meancost=rep(0,numneigh))
for (neigh in 1:numneigh){
folds<-createFolds(1:nrow(iris),k=10,returnTrain=TRUE)
costs<-rep(0,10)
for (j in 1:10){
irisfold<-iris[folds[[j]],]
knn_model<-knn(
train=U[folds[[j]],],
test=U[-folds[[j]],],
cl=irisfold$Species,
k=neigh
)
testing<-iris[-folds[[j]],]%>%
mutate(SpeciesTest=knn_model)%>%
mutate(Correct=ifelse(SpeciesTest==Species,0,1))
#    for (i in 1:nrow(testing)){
#     if (testing$SpeciesTest[i]==Testing$Species[i]){
#      testing$Correct[i]<-0
#    }
#   else {
#    testing$Correct[i]<-1
#  }
costs[j]<-1/nrow(testing)*sum(testing$Correct)
}
kcosts$meancost[neigh]<-mean(costs)
}
kcosts<-kcosts%>%
mutate(krecip=1/k)
ggplot(data=kcosts,aes(x=k,y=meancost))+
geom_line()+geom_point()+
scale_x_reverse()
kcostsarr<-kcosts%>%
arrange(meancost)
X<-as.matrix(wine[,-12])
wine<-read.csv("winequality-red.csv")
table(wine$quality)
X<-as.matrix(wine[,-12])
for (j in 1:11){
X[,j]<-X[,j]-mean(X[,j])
}
svdX<-svd(X)
(explained_variance<-svdX$d/sum(svdX$d))
cumsum(explained_variance)
ggplot()+
geom_col(aes(x=1:(ncol(wine)-1),y=explained_variance),fill="purple",color="red")
p=4
U<-svdX$u[,1:p]
numneigh<-50
kcosts<-data.frame(k=seq(1,numneigh),
meancost=rep(0,numneigh))
for (neigh in 1:numneigh){
folds<-createFolds(1:nrow(wine),k=10,returnTrain=TRUE)
costs<-rep(0,10)
for (j in 1:10){
winefold<-wine[folds[[j]],]
knn_model<-knn(
train=U[folds[[j]],],
test=U[-folds[[j]],],
cl=winefold$quality,
k=neigh
)
testing<-wine[-folds[[j]],]%>%
mutate(QualityTest=knn_model)%>%
mutate(Correct=ifelse(QualityTest==quality,0,1))
#    for (i in 1:nrow(testing)){
#     if (testing$SpeciesTest[i]==Testing$Species[i]){
#      testing$Correct[i]<-0
#    }
#   else {
#    testing$Correct[i]<-1
#  }
costs[j]<-1/nrow(testing)*sum(testing$Correct)
}
kcosts$meancost[neigh]<-mean(costs)
}
kcosts<-kcosts%>%
mutate(krecip=1/k)
ggplot(data=kcosts,aes(x=k,y=meancost))+
geom_line()+geom_point()+
scale_x_reverse()
kcostsarr<-kcosts%>%
arrange(meancost)
ggplot(data=kcosts,aes(x=krecip,y=meancost))+
geom_line()+geom_point()
library(tidyverse)
integraldata<-data.frame(x=seq(0,20,by=0.25))
View(integraldata)
integraldata<-integraldata%>%
mutate(f(x),rep(0,nrow(integraldata)))
integraldata<-integraldata%>%
mutate(fx,rep(0,nrow(integraldata)))
integraldata<-integraldata%>%
mutate(fx=rep(0,nrow(integraldata)))
View(integraldata)
sin(pi)
integraldata<-integraldata%>%
mutate(fx=(sin(3x^2+5))^2)
sine<-function(x){
return((sin(3x^2+5))^2)
}
sine<-function(x){
return((sin(3x^2+5))^2)
}
View(integraldata)
library(tidyverse)
integraldata<-data.frame(x=seq(0,20,by=0.25))
sine<-function(x){
return((sin(3x^2+5))^2)
}
library(tidyverse)
integraldata<-data.frame(x=seq(0,20,by=0.25))
sine<-function(x){
return((sin(3*x^2+5))^2)
}
for(j in 1:nrow(integraldata)){
integraldata[j,2]<-sapply(x
FUN = sine)
}
for(j in 1:nrow(integraldata)){
integraldata[j,2]<-sapply(x,
FUN = sine)
}
View(integraldata)
bollywood<-read.csv("Bollywood.csv")
bollywood<-read.csv("Bollywood.csv")
View(bollywood)
(fivenum(bollywood))
(fivenum(bollywood$Budget))
(mean(bollywood$Budget))
std(bollywood$Budget)
stdev(bollywood$Budget)
sd(bollywood$Budget)
fivenum(bollywood$Gross)
mean(bollywood$Gross)
sd(bollywood$Gross)
ggplot(data=bollywood,aes(x=Budget,y=Gross))+
geom_point()
ggplot(data=bollywood,aes(x=Budget,y=Gross))+
geom_point(color="green")
ggplot(data=bollywood,aes(x=Budget,y=Gross))+
geom_point(color="green",shape=3)
ggplot(data=bollywood,aes(x=Budget,y=Gross))+
geom_point(color="purple",shape=3)
# read in the data
wine<-read.csv("winequality-red.csv")
NumFolds <- 10
# set up the folds
folds <- createFolds(1:nrow(wine), k = NumFolds, returnTrain = TRUE)
# set up the number of neighbors you're going to check
MaxNeighbors <- 50
# set up a storage location for the future cross validation error estimates
cv_data <- data.frame(
Neighbors = 1:MaxNeighbors,
CV = rep(0,MaxNeighbors)
)
for (K in 1:MaxNeighbors) { # loop over the number of neighbors
# set up space for each CV estimate
cv_class_error <- rep(0,NumFolds)
for (j in 1:NumFolds) {  # loop for cross validation
# training data for knn
train <- wine[folds[[j]], 1:4 ]
train_class <- wine$quality[folds[[j]]]
# testing data for knn
test <- wine[-folds[[j]], 1:4 ]
test_class <- wine$quality[-folds[[j]]]
# build the knn model
knn_model <- knn(
train = train,
test = test,
cl = train_class,
k = K
)
# store the value of the classification error for each fold
cv_class_error[j] <- mean( knn_model != test_class  )
} # end the loop
# store the mean cv error for each choice of neighbors
cv_data$CV[K] <- mean( cv_class_error  )
}
# plot
ggplot(data=cv_data, aes(x=1/Neighbors, y=CV)) +
geom_line() + geom_point()
# show the cross validation errors in order
head(cv_data %>% arrange(CV))
source('~/.active-rstudio-document', echo=TRUE)
wine<-read.csv("winequality-red.csv")
NumFolds <- 10
# set up the folds
folds <- createFolds(1:nrow(wine), k = NumFolds, returnTrain = TRUE)
# set up the number of neighbors you're going to check
MaxNeighbors <- 50
# set up a storage location for the future cross validation error estimates
cv_data <- data.frame(
Neighbors = 1:MaxNeighbors,
CV = rep(0,MaxNeighbors)
)
for (K in 1:MaxNeighbors) { # loop over the number of neighbors
# set up space for each CV estimate
cv_class_error <- rep(0,NumFolds)
for (j in 1:NumFolds) {  # loop for cross validation
# training data for knn
train <- wine[folds[[j]], 1:4 ]
train_class <- wine$quality[folds[[j]]]
# testing data for knn
test <- wine[-folds[[j]], 1:4 ]
test_class <- wine$quality[-folds[[j]]]
# build the knn model
knn_model <- knn(
train = train,
test = test,
cl = train_class,
k = K
)
# store the value of the classification error for each fold
cv_class_error[j] <- mean( knn_model != test_class  )
} # end the loop
# store the mean cv error for each choice of neighbors
cv_data$CV[K] <- mean( cv_class_error  )
}
# plot
ggplot(data=cv_data, aes(x=1/Neighbors, y=CV)) +
geom_line() + geom_point()
# show the cross validation errors in order
head(cv_data %>% arrange(CV))
rm(list=ls())
library(tidyverse)
library(class)
library(caret)
library(boot)
# Goals: build a knn model to predict the Species in the Iris dataset.
# Cross validate to determine the optimal number of neighbors
# Display a plot of Flexibility vs cross validated error
# Make a decision on the optimal number of neighbors for this model.
# read in the data
wine<-read.csv("winequality-red.csv")
NumFolds <- 10
# set up the folds
folds <- createFolds(1:nrow(wine), k = NumFolds, returnTrain = TRUE)
# set up the number of neighbors you're going to check
MaxNeighbors <- 50
# set up a storage location for the future cross validation error estimates
cv_data <- data.frame(
Neighbors = 1:MaxNeighbors,
CV = rep(0,MaxNeighbors)
)
for (K in 1:MaxNeighbors) { # loop over the number of neighbors
# set up space for each CV estimate
cv_class_error <- rep(0,NumFolds)
for (j in 1:NumFolds) {  # loop for cross validation
# training data for knn
train <- wine[folds[[j]], 1:4 ]
train_class <- wine$quality[folds[[j]]]
# testing data for knn
test <- wine[-folds[[j]], 1:4 ]
test_class <- wine$quality[-folds[[j]]]
# build the knn model
knn_model <- knn(
train = train,
test = test,
cl = train_class,
k = K
)
# store the value of the classification error for each fold
cv_class_error[j] <- mean( knn_model != test_class  )
} # end the loop
# store the mean cv error for each choice of neighbors
cv_data$CV[K] <- mean( cv_class_error  )
}
# plot
ggplot(data=cv_data, aes(x=1/Neighbors, y=CV)) +
geom_line() + geom_point()
# show the cross validation errors in order
head(cv_data %>% arrange(CV))
knitr::opts_chunk$set(echo = TRUE, eval=TRUE, message=FALSE, warning=FALSE, cache=TRUE)
library(tidyverse)
library(boot)
library(caret)
library(ISLR)
library(rsq)
library(class)
numneigh<-50
kcosts<-data.frame(k=seq(1,numneigh),
meancost=rep(0,numneigh))
for (neigh in 3:numneigh){
folds<-createFolds(1:nrow(wine),k=10,returnTrain=TRUE)
costs<-rep(0,10)
for (j in 1:10){
winefold<-wine[folds[[j]],]
knn_model<-knn(
train=winefold%>%
select(-quality),
test=wine[-folds[[j]],]%>%
select(-quality),
cl=winefold$quality,
k=neigh
)
testing<-wine[-folds[[j]],]%>%
mutate(QualityTest=knn_model)%>%
mutate(Correct=ifelse(QualityTest==quality,0,1))
#    for (i in 1:nrow(testing)){
#     if (testing$SpeciesTest[i]==Testing$Species[i]){
#      testing$Correct[i]<-0
#    }
#   else {
#    testing$Correct[i]<-1
#  }
costs[j]<-1/nrow(testing)*sum(testing$Correct)
}
kcosts$meancost[neigh]<-mean(costs)
}
kcosts<-kcosts%>%
mutate(krecip=1/k)
#ggplot(data=kcosts,aes(x=k,y=meancost))+
#  geom_line()+geom_point()+
#  scale_x_reverse()
ggplot(data=kcosts,aes(x=krecip,y=meancost))+
geom_line()+geom_point()
kcostsarr<-kcosts%>%
arrange(meancost)
rm(list=ls())
numneigh<-50
kcosts<-data.frame(k=seq(3,numneigh),
meancost=rep(0,numneigh))
rm(list=ls())
numneigh<-50
kcosts<-data.frame(k=seq(3,numneigh),
meancost=rep(0,numneigh-2))
for (neigh in 3:numneigh){
folds<-createFolds(1:nrow(wine),k=10,returnTrain=TRUE)
costs<-rep(0,10)
for (j in 1:10){
winefold<-wine[folds[[j]],]
knn_model<-knn(
train=winefold%>%
select(-quality),
test=wine[-folds[[j]],]%>%
select(-quality),
cl=winefold$quality,
k=neigh
)
testing<-wine[-folds[[j]],]%>%
mutate(QualityTest=knn_model)%>%
mutate(Correct=ifelse(QualityTest==quality,0,1))
#    for (i in 1:nrow(testing)){
#     if (testing$SpeciesTest[i]==Testing$Species[i]){
#      testing$Correct[i]<-0
#    }
#   else {
#    testing$Correct[i]<-1
#  }
costs[j]<-1/nrow(testing)*sum(testing$Correct)
}
kcosts$meancost[neigh]<-mean(costs)
}
wine<-read.csv("winequality-red.csv")
table(wine$quality)
rm(list=ls())
numneigh<-50
kcosts<-data.frame(k=seq(3,numneigh),
meancost=rep(0,numneigh-2))
for (neigh in 3:numneigh){
folds<-createFolds(1:nrow(wine),k=10,returnTrain=TRUE)
costs<-rep(0,10)
for (j in 1:10){
winefold<-wine[folds[[j]],]
knn_model<-knn(
train=winefold%>%
select(-quality),
test=wine[-folds[[j]],]%>%
select(-quality),
cl=winefold$quality,
k=neigh
)
testing<-wine[-folds[[j]],]%>%
mutate(QualityTest=knn_model)%>%
mutate(Correct=ifelse(QualityTest==quality,0,1))
#    for (i in 1:nrow(testing)){
#     if (testing$SpeciesTest[i]==Testing$Species[i]){
#      testing$Correct[i]<-0
#    }
#   else {
#    testing$Correct[i]<-1
#  }
costs[j]<-1/nrow(testing)*sum(testing$Correct)
}
kcosts$meancost[neigh]<-mean(costs)
}
wine<-read.csv("winequality-red.csv")
table(wine$quality)
numneigh<-50
kcosts<-data.frame(k=seq(3,numneigh),
meancost=rep(0,numneigh-2))
for (neigh in 3:numneigh){
folds<-createFolds(1:nrow(wine),k=10,returnTrain=TRUE)
costs<-rep(0,10)
for (j in 1:10){
winefold<-wine[folds[[j]],]
knn_model<-knn(
train=winefold%>%
select(-quality),
test=wine[-folds[[j]],]%>%
select(-quality),
cl=winefold$quality,
k=neigh
)
testing<-wine[-folds[[j]],]%>%
mutate(QualityTest=knn_model)%>%
mutate(Correct=ifelse(QualityTest==quality,0,1))
#    for (i in 1:nrow(testing)){
#     if (testing$SpeciesTest[i]==Testing$Species[i]){
#      testing$Correct[i]<-0
#    }
#   else {
#    testing$Correct[i]<-1
#  }
costs[j]<-1/nrow(testing)*sum(testing$Correct)
}
kcosts$meancost[neigh]<-mean(costs)
}
View(kcosts)
rm(list=ls())
wine<-read.csv("winequality-red.csv")
table(wine$quality)
minneigh<-3
numneigh<-50
kcosts<-data.frame(k=seq(minneigh,numneigh),
meancost=rep(0,numneigh-minneigh+1))
for (neigh in minneigh:numneigh){
folds<-createFolds(1:nrow(wine),k=10,returnTrain=TRUE)
costs<-rep(0,10)
for (j in 1:10){
winefold<-wine[folds[[j]],]
knn_model<-knn(
train=winefold%>%
select(-quality),
test=wine[-folds[[j]],]%>%
select(-quality),
cl=winefold$quality,
k=neigh
)
testing<-wine[-folds[[j]],]%>%
mutate(QualityTest=knn_model)%>%
mutate(Correct=ifelse(QualityTest==quality,0,1))
#    for (i in 1:nrow(testing)){
#     if (testing$SpeciesTest[i]==Testing$Species[i]){
#      testing$Correct[i]<-0
#    }
#   else {
#    testing$Correct[i]<-1
#  }
costs[j]<-1/nrow(testing)*sum(testing$Correct)
}
kcosts$meancost[neigh]<-mean(costs)
}
minneigh<-3
numneigh<-50
kcosts<-data.frame(k=seq(minneigh,numneigh),
meancost=rep(0,numneigh-minneigh))
minneigh<-3
numneigh<-50
kcosts<-data.frame(k=seq(minneigh,numneigh),
meancost=rep(0,numneigh-minneigh+1))
for (neigh in minneigh:numneigh){
folds<-createFolds(1:nrow(wine),k=10,returnTrain=TRUE)
costs<-rep(0,10)
for (j in 1:10){
winefold<-wine[folds[[j]],]
knn_model<-knn(
train=winefold%>%
select(-quality),
test=wine[-folds[[j]],]%>%
select(-quality),
cl=winefold$quality,
k=neigh
)
testing<-wine[-folds[[j]],]%>%
mutate(QualityTest=knn_model)%>%
mutate(Correct=ifelse(QualityTest==quality,0,1))
#    for (i in 1:nrow(testing)){
#     if (testing$SpeciesTest[i]==Testing$Species[i]){
#      testing$Correct[i]<-0
#    }
#   else {
#    testing$Correct[i]<-1
#  }
costs[j]<-1/nrow(testing)*sum(testing$Correct)
}
kcosts$meancost[neigh]<-mean(costs)
}
